{"ast":null,"code":"function CheckExacts(generatColors, guessColors) {\n  i = 0;\n  exacts = 0;\n  while (i < 4) {\n    //When a match is made, cross out the matched elements in both guess and secret.\n    if (phraseSB.charAt(i) == guessSB.charAt(i)) {\n      exacts = exacts + 1;\n      phraseSB.setCharAt(i, '-');\n      guessSB.setCharAt(i, '*');\n    }\n    i++;\n  }\n  return exacts;\n}\n_c = CheckExacts;\nfunction CheckPartials(generatColors, guessColors) {\n  i = 0;\n  partials = 0;\n  while (i < 4) {\n    j = 0;\n    while (j < 4) {\n      //When a match is made, cross out the matched elements in both guess and secret.\n      if (phraseSB.charAt(i) == guessSB.charAt(j)) {\n        partials = partials + 1;\n        phraseSB.setCharAt(i, '-');\n        guessSB.setCharAt(j, '*');\n      }\n      j++;\n    }\n    i++;\n  }\n  return partials;\n}\n_c2 = CheckPartials;\nfunction CheckMatches(generatColors, guessColors) {\n  const exact = CheckExacts(generatColors, guessColors);\n  const partial = CheckPartials(generatColors, guessColors);\n  return [exact, partial];\n}\n_c3 = CheckMatches;\nexport default CheckMatches;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CheckExacts\");\n$RefreshReg$(_c2, \"CheckPartials\");\n$RefreshReg$(_c3, \"CheckMatches\");","map":{"version":3,"names":["CheckExacts","generatColors","guessColors","i","exacts","phraseSB","charAt","guessSB","setCharAt","_c","CheckPartials","partials","j","_c2","CheckMatches","exact","partial","_c3","$RefreshReg$"],"sources":["/Users/tiansigu/Documents/CS514/react-gcp-app-engine/src/CheckMatches.js"],"sourcesContent":["function CheckExacts(generatColors, guessColors) {\n    i = 0;\n    exacts = 0;\n    while (i < 4) {\n        //When a match is made, cross out the matched elements in both guess and secret.\n        if (phraseSB.charAt(i) == guessSB.charAt(i)) {\n            exacts = exacts + 1;\n            phraseSB.setCharAt(i, '-');\n            guessSB.setCharAt(i, '*');\n        }\n        i++;\n    }\n    return exacts;\n}\n\nfunction CheckPartials(generatColors, guessColors) {\n    i = 0;\n    partials = 0;\n    while (i < 4) {\n        j = 0;\n        while (j < 4) {\n        //When a match is made, cross out the matched elements in both guess and secret.\n            if (phraseSB.charAt(i) == guessSB.charAt(j)) {\n                partials = partials + 1;\n                phraseSB.setCharAt(i,'-');\n                guessSB.setCharAt(j,'*');\n            }\n        j++;\n        }\n            i++;\n        }\n    return partials;\n}\n\nfunction CheckMatches(generatColors, guessColors) {\n    const exact = CheckExacts(generatColors, guessColors);\n    const partial = CheckPartials(generatColors, guessColors);\n    return [exact, partial];\n}\n\nexport default CheckMatches;"],"mappings":"AAAA,SAASA,WAAWA,CAACC,aAAa,EAAEC,WAAW,EAAE;EAC7CC,CAAC,GAAG,CAAC;EACLC,MAAM,GAAG,CAAC;EACV,OAAOD,CAAC,GAAG,CAAC,EAAE;IACV;IACA,IAAIE,QAAQ,CAACC,MAAM,CAACH,CAAC,CAAC,IAAII,OAAO,CAACD,MAAM,CAACH,CAAC,CAAC,EAAE;MACzCC,MAAM,GAAGA,MAAM,GAAG,CAAC;MACnBC,QAAQ,CAACG,SAAS,CAACL,CAAC,EAAE,GAAG,CAAC;MAC1BI,OAAO,CAACC,SAAS,CAACL,CAAC,EAAE,GAAG,CAAC;IAC7B;IACAA,CAAC,EAAE;EACP;EACA,OAAOC,MAAM;AACjB;AAACK,EAAA,GAbQT,WAAW;AAepB,SAASU,aAAaA,CAACT,aAAa,EAAEC,WAAW,EAAE;EAC/CC,CAAC,GAAG,CAAC;EACLQ,QAAQ,GAAG,CAAC;EACZ,OAAOR,CAAC,GAAG,CAAC,EAAE;IACVS,CAAC,GAAG,CAAC;IACL,OAAOA,CAAC,GAAG,CAAC,EAAE;MACd;MACI,IAAIP,QAAQ,CAACC,MAAM,CAACH,CAAC,CAAC,IAAII,OAAO,CAACD,MAAM,CAACM,CAAC,CAAC,EAAE;QACzCD,QAAQ,GAAGA,QAAQ,GAAG,CAAC;QACvBN,QAAQ,CAACG,SAAS,CAACL,CAAC,EAAC,GAAG,CAAC;QACzBI,OAAO,CAACC,SAAS,CAACI,CAAC,EAAC,GAAG,CAAC;MAC5B;MACJA,CAAC,EAAE;IACH;IACIT,CAAC,EAAE;EACP;EACJ,OAAOQ,QAAQ;AACnB;AAACE,GAAA,GAjBQH,aAAa;AAmBtB,SAASI,YAAYA,CAACb,aAAa,EAAEC,WAAW,EAAE;EAC9C,MAAMa,KAAK,GAAGf,WAAW,CAACC,aAAa,EAAEC,WAAW,CAAC;EACrD,MAAMc,OAAO,GAAGN,aAAa,CAACT,aAAa,EAAEC,WAAW,CAAC;EACzD,OAAO,CAACa,KAAK,EAAEC,OAAO,CAAC;AAC3B;AAACC,GAAA,GAJQH,YAAY;AAMrB,eAAeA,YAAY;AAAC,IAAAL,EAAA,EAAAI,GAAA,EAAAI,GAAA;AAAAC,YAAA,CAAAT,EAAA;AAAAS,YAAA,CAAAL,GAAA;AAAAK,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}