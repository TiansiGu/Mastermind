{"ast":null,"code":"var _jsxFileName = \"/Users/tiansigu/Documents/CS514/Project4/react-gcp-app-engine/src/Components/LoginForm.js\",\n  _s = $RefreshSig$();\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithRedirect, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport React, { useState, useEffect } from \"react\";\n\n// LoginSuccessful is a function sent in by parent component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LoginForm({\n  LoginEvent\n}) {\n  _s();\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDFC0IY9mvb_CBZ9rMtghMTjbj00aXEdk0\",\n    authDomain: \"reactsample-17475.firebaseapp.com\",\n    projectId: \"reactsample-17475\",\n    storageBucket: \"reactsample-17475.appspot.com\",\n    messagingSenderId: \"29630218098\",\n    appId: \"1:29630218098:web:14aa85c93efbbc10a867eb\"\n  };\n  initializeApp(firebaseConfig);\n  const [loggedUser, setLoggedUser] = useState(\"\");\n\n  // function to sign in with Google's page\n  const signInWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    const auth = getAuth();\n    signInWithPopup(auth, provider).then(result => {\n      // User signed in\n      console.log(result.user);\n      setLoggedUser(result.user);\n    }).catch(error => {\n      // Handle Errors here.\n      console.error(error);\n    });\n  };\n\n  // function to sign out\n  function logoutGoogle() {\n    const auth = getAuth();\n    auth.signOut();\n    setLoggedUser(null);\n  }\n\n  // we put the onAuthStateChanged in useEffect so this is only called when\n  // this component mounts\n  useEffect(() => {\n    const auth = getAuth();\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        // User is signed in.\n        console.log(\"User is signed in:\", user);\n        setLoggedUser(user);\n      } else {\n        // No user is signed in.\n        console.log(\"No user is signed in.\");\n      }\n      LoginEvent(user.uid);\n    });\n  }, []);\n  // note the ? to show either login or logout button\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"log\",\n    children: loggedUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logoutGoogle,\n        children: \"Log out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), \" \"]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: signInWithGoogle,\n      children: \"Sign in with Google\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginForm, \"lgD7Gbr52K9zAuQnOrbAQHsSeMI=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","GoogleAuthProvider","signInWithPopup","React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","LoginForm","LoginEvent","_s","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","loggedUser","setLoggedUser","signInWithGoogle","provider","auth","then","result","console","log","user","catch","error","logoutGoogle","signOut","onAuthStateChanged","uid","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tiansigu/Documents/CS514/Project4/react-gcp-app-engine/src/Components/LoginForm.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  signInWithPopup,\n} from \"firebase/auth\";\nimport React, { useState, useEffect } from \"react\";\n\n// LoginSuccessful is a function sent in by parent component\nfunction LoginForm({ LoginEvent }) {\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDFC0IY9mvb_CBZ9rMtghMTjbj00aXEdk0\",\n    authDomain: \"reactsample-17475.firebaseapp.com\",\n    projectId: \"reactsample-17475\",\n    storageBucket: \"reactsample-17475.appspot.com\",\n    messagingSenderId: \"29630218098\",\n    appId: \"1:29630218098:web:14aa85c93efbbc10a867eb\",\n  };\n\n  initializeApp(firebaseConfig);\n\n  const [loggedUser, setLoggedUser] = useState(\"\");\n\n  // function to sign in with Google's page\n  const signInWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    const auth = getAuth();\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        // User signed in\n        console.log(result.user);\n        setLoggedUser(result.user);\n      })\n      .catch((error) => {\n        // Handle Errors here.\n        console.error(error);\n      });\n  };\n\n  // function to sign out\n  function logoutGoogle() {\n    const auth = getAuth();\n    auth.signOut();\n    setLoggedUser(null);\n  }\n\n  // we put the onAuthStateChanged in useEffect so this is only called when\n  // this component mounts\n  useEffect(() => {\n    const auth = getAuth();\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        console.log(\"User is signed in:\", user);\n\n        setLoggedUser(user);\n      } else {\n        // No user is signed in.\n        console.log(\"No user is signed in.\");\n      }\n      LoginEvent(user.uid);\n    });\n  }, []);\n  // note the ? to show either login or logout button\n  return (\n    <div className=\"log\">\n      {loggedUser ? (\n        <>\n          {/* <p>user: {loggedUser.uid}</p>{\" \"} */}\n          <button onClick={logoutGoogle}>Log out</button>{\" \"}\n        </>\n      ) : (\n        <button onClick={signInWithGoogle}>Sign in with Google</button>\n      )}\n    </div>\n  );\n}\nexport default LoginForm;\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACEC,OAAO,EACPC,kBAAkB,EAClBC,kBAAkB,EAClBC,eAAe,QACV,eAAe;AACtB,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAElD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,SAASA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EACjC,MAAMC,cAAc,GAAG;IACrBC,MAAM,EAAE,yCAAyC;IACjDC,UAAU,EAAE,mCAAmC;IAC/CC,SAAS,EAAE,mBAAmB;IAC9BC,aAAa,EAAE,+BAA+B;IAC9CC,iBAAiB,EAAE,aAAa;IAChCC,KAAK,EAAE;EACT,CAAC;EAEDrB,aAAa,CAACe,cAAc,CAAC;EAE7B,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMkB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,QAAQ,GAAG,IAAItB,kBAAkB,CAAC,CAAC;IACzC,MAAMuB,IAAI,GAAGzB,OAAO,CAAC,CAAC;IACtBG,eAAe,CAACsB,IAAI,EAAED,QAAQ,CAAC,CAC5BE,IAAI,CAAEC,MAAM,IAAK;MAChB;MACAC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,IAAI,CAAC;MACxBR,aAAa,CAACK,MAAM,CAACG,IAAI,CAAC;IAC5B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChB;MACAJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,SAASC,YAAYA,CAAA,EAAG;IACtB,MAAMR,IAAI,GAAGzB,OAAO,CAAC,CAAC;IACtByB,IAAI,CAACS,OAAO,CAAC,CAAC;IACdZ,aAAa,CAAC,IAAI,CAAC;EACrB;;EAEA;EACA;EACAhB,SAAS,CAAC,MAAM;IACd,MAAMmB,IAAI,GAAGzB,OAAO,CAAC,CAAC;IACtByB,IAAI,CAACU,kBAAkB,CAAEL,IAAI,IAAK;MAChC,IAAIA,IAAI,EAAE;QACR;QACAF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEC,IAAI,CAAC;QAEvCR,aAAa,CAACQ,IAAI,CAAC;MACrB,CAAC,MAAM;QACL;QACAF,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC;MACAjB,UAAU,CAACkB,IAAI,CAACM,GAAG,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EACN;EACA,oBACE5B,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBjB,UAAU,gBACTb,OAAA,CAAAE,SAAA;MAAA4B,QAAA,gBAEE9B,OAAA;QAAQ+B,OAAO,EAAEN,YAAa;QAAAK,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EAAC,GAAG;IAAA,eACnD,CAAC,gBAEHnC,OAAA;MAAQ+B,OAAO,EAAEhB,gBAAiB;MAAAe,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAC/D;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC9B,EAAA,CAnEQF,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AAoElB,eAAeA,SAAS;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}