[{"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/index.js":"1","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/App.js":"2","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/reportWebVitals.js":"3","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Pages/Board.js":"4","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Pages/StartPage.js":"5","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Pages/GameRecord.js":"6","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/LoginForm.js":"7","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/OneGuessBoard.js":"8","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/MastermindHeader.js":"9","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/Instruction.js":"10","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/Pagination.js":"11","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/CheckMatches.js":"12","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/Circle.js":"13"},{"size":581,"mtime":1699486551009,"results":"14","hashOfConfig":"15"},{"size":1164,"mtime":1701306481730,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1698864248126,"results":"17","hashOfConfig":"15"},{"size":6503,"mtime":1701239932480,"results":"18","hashOfConfig":"15"},{"size":1970,"mtime":1701289395287,"results":"19","hashOfConfig":"15"},{"size":7953,"mtime":1701459066232,"results":"20","hashOfConfig":"15"},{"size":2180,"mtime":1701455496503,"results":"21","hashOfConfig":"15"},{"size":2142,"mtime":1700864551035,"results":"22","hashOfConfig":"15"},{"size":1061,"mtime":1701062830847,"results":"23","hashOfConfig":"15"},{"size":726,"mtime":1700858481894,"results":"24","hashOfConfig":"15"},{"size":3017,"mtime":1701414914587,"results":"25","hashOfConfig":"15"},{"size":1210,"mtime":1699384664140,"results":"26","hashOfConfig":"15"},{"size":301,"mtime":1700860060002,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jtyot9",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/index.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/App.js",["72"],[],"import React from \"react\";\nimport { useState } from \"react\";\n\nimport Board from \"./Pages/Board\";\nimport StartPage from \"./Pages/StartPage\";\nimport GameRecord from \"./Pages/GameRecord\";\nimport LoginForm from \"./Components/LoginForm\";\n\n// Component of the entire game board, the level of a round of game\nfunction App() {\n  const [handle, setHandle] = useState(\"\");\n  const handleHandle = (name) => {\n    setHandle(name);\n  };\n\n  const [playerId, setPlayerId] = useState(\"\");\n  const handlePlayerId = (id) => {\n    setPlayerId(id);\n  };\n\n  const [inGame, setInGame] = useState(true);\n  const handleInGame = () => {\n    setInGame(!inGame);\n  };\n\n  return (\n    <>\n      {/* <LoginForm LoginEvent={HandleLogin} /> */}\n      {handle ? (\n        inGame ? (\n          <Board\n            onHandleChange={handleHandle}\n            onGamePageChange={handleInGame}\n            userId={playerId}\n          />\n        ) : (\n          <GameRecord onGamePageChange={handleInGame} userId={playerId} />\n        )\n      ) : (\n        <StartPage\n          onHandleChange={handleHandle}\n          onUserIdChange={handlePlayerId}\n        />\n      )}\n    </>\n  );\n}\n\nexport default App;\n","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/reportWebVitals.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Pages/Board.js",["73","74"],[],"import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Button, Image, Modal } from \"react-bootstrap\";\nimport \"../Board.css\";\nimport axios from \"axios\";\n\nimport OneGuessBoard from \"../Components/OneGuessBoard\";\nimport MastermindHeader from \"../Components/MastermindHeader\";\nimport Instruction from \"../Components/Instruction\";\n\n// Component of the entire game board, the level of a round of game\nfunction Board({ onHandleChange, onGamePageChange, userId }) {\n  // Pick a color from color box, and set the currentColor that you want to guess\n  const [currentColor, setCurrentColor] = useState(\"#a3a3a3\");\n  const colors = [\"red\", \"blue\", \"green\", \"yellow\", \"orange\", \"purple\"];\n  function handleColorPick(color) {\n    setCurrentColor(color);\n  }\n  let dislayColor;\n  currentColor == \"#a3a3a3\"\n    ? (dislayColor = \"You haven't selected yet\")\n    : (dislayColor = currentColor);\n\n  // Current Active Row (the n chance in which the player is in, can't skip)\n  const [currentActiveRow, setCurrentActiveRow] = useState(9);\n  function handleSubmit() {\n    setCurrentActiveRow(currentActiveRow - 1);\n    console.log(colorSequence);\n  }\n\n  // Generate a random color sequence (eg: YYRB)\n  const [colorSequence, setColorSequence] = useState([]);\n\n  function generateSequence() {\n    const sequence = [];\n    for (let i = 0; i < 4; i++) {\n      const randomIndex = Math.floor(Math.random() * colors.length);\n      sequence.push(colors[randomIndex]);\n    }\n    setColorSequence(sequence);\n    console.log(colorSequence);\n  }\n\n  // At the beginning, generate a color sequence\n  useEffect(() => {\n    generateSequence();\n    // console.log(colorSequence);\n  }, []);\n\n  const [isReset, setIsReset] = useState(false);\n\n  // When clicking \"Play Again\", reset the game\n  function playAgain() {\n    generateSequence(); //generate a new color sequence\n    setCurrentColor(\"#a3a3a3\"); //put the selected color to the initial one\n    setIsReset(!isReset); //filp isReset so that in OneGuessBoard all the colors filled could be cleared\n    setCurrentActiveRow(9); //Roll the game back to the first guess\n    setIsWin(false);\n  }\n\n  // Win or Lose State\n  const [isWin, setIsWin] = useState(false);\n\n  function handleWin() {\n    setIsWin(true);\n  }\n\n  // Current score\n  let score = 10 + currentActiveRow * 10;\n\n  // Current date\n  const [currentDate, setCurrentDate] = useState(new Date());\n\n  // Depend on Win, Lose, or in progress, the components to be displayed on the page are different\n  let status;\n  let instruction;\n  if (isWin) {\n    status = <p>YOU WIN!</p>;\n    instruction = <Image src=\"smileface.png\" roundedCircle />;\n  } else if (currentActiveRow < 0) {\n    status = <p>YOU LOST!</p>;\n    instruction = <Image src=\"sadface.png\" roundedCircle />;\n  } else {\n    status = <p>You have {currentActiveRow + 1} chances left.</p>;\n    instruction = <Instruction />;\n  }\n\n  // Pop-up window (Modal) control\n  const [showModal, setShowModal] = useState(false);\n\n  const handleClose = () => setShowModal(false);\n  const handleShow = () => setShowModal(true);\n\n  useEffect(() => {\n    if (isWin || currentActiveRow < 0) {\n      handleShow();\n    }\n  }, [isWin, currentActiveRow]);\n\n  const handleSaveGame = async () => {\n    // Implement save game logic here\n    await setCurrentDate(new Date());\n    let date = currentDate.toLocaleString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"numeric\",\n      second: \"numeric\",\n      timeZone: \"America/Los_Angeles\", // Set the time to be PST\n    });\n    console.log(date);\n    const postData = {\n      userId,\n      score,\n      date,\n    };\n    try {\n      const response = await axios.post(\n        \"https://mastermind-backend-tiansi.wl.r.appspot.com/game/saveRecord\",\n        postData\n      );\n      console.log(\"Response:\", response.data);\n    } catch (error) {\n      console.error(\"Error posting data:\", error);\n    }\n    console.log(\"Game record saved!\");\n    handleClose();\n  };\n\n  return (\n    <div className=\"board-container\">\n      <MastermindHeader\n        onHandleUpdate={onHandleChange}\n        onPageUpdate={onGamePageChange}\n      />\n      <div className=\"board\">\n        {/* use bootstrap grid system */}\n        <div className=\"row mt-3\">\n          {/* Board Area */}\n          <div className=\"col-md-4\">\n            {Array(10)\n              .fill(null)\n              .map((row, index) => {\n                return (\n                  <OneGuessBoard\n                    key={index}\n                    selectColor={currentColor}\n                    isActive={() => index === currentActiveRow}\n                    phrase={colorSequence}\n                    onRowSubmit={handleSubmit}\n                    isReset={isReset}\n                    onWin={handleWin}\n                  />\n                );\n              })}\n          </div>\n\n          {/* Instruction Area */}\n          <div className=\"col-md-4\">\n            <div className=\"instruction-part\">{instruction}</div>\n            <div className=\"prompt\">{status}</div>\n          </div>\n\n          {/* Color Pick Area */}\n          <div className=\"col-md-4\">\n            <div className=\"color-pick-section\">\n              <h2>Choose a Color:</h2>\n              <div className=\"color-pick-box\">\n                {colors.map((color, index) => (\n                  <button\n                    key={index}\n                    className=\"color-pick-button\"\n                    style={{ backgroundColor: color }}\n                    onClick={() => handleColorPick(color)}\n                  ></button>\n                ))}\n              </div>\n              <p className=\"select\">Selected Color: {dislayColor}</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"play-again\">\n          <Button className=\"play-again-button\" size=\"lg\" onClick={playAgain}>\n            Play Again\n          </Button>\n        </div>\n      </div>\n\n      {/* Modal */}\n      <Modal show={showModal} onHide={handleClose}>\n        {/* Remove Modal.Header if you don't want the title */}\n        <Modal.Body>\n          <p>Your score is {score}</p>\n          <p>Do you want to save this game record?</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            No\n          </Button>\n          <Button variant=\"primary\" onClick={handleSaveGame}>\n            Yes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Board;\n","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Pages/StartPage.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Pages/GameRecord.js",["75"],[],"import React, { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faArrowLeft, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./GameRecord.css\"; // Import your custom CSS file for styling\nimport axios from \"axios\";\n\nimport Pagination from \"../Components/Pagination\";\n\nfunction GameRecord({ onGamePageChange, userId }) {\n  const [selectedComponent, setSelectedComponent] = useState(true); //true represents diplaying userRecords\n\n  // A list of gameRecords fetched by a specific userId\n  // eg: [ { id: 5138716758638592, score: 120, date: \"2023-01-15\" },\n  // { id: 5631671361601537, score: 90, date: \"2023-01-10\" }, ...]\n  const [userScores, setUserScores] = useState(null);\n  // A list of all the gameRecords fetched by findAll()\n  //eg: [ { userid: \"123\", username: \"JohnDoe\", score: 150, date: \"2023-01-15\" },\n  // { userid: \"456\", username: \"David\", score: 140, date: \"2023-02-12\" }, ...]\n  const [highScores, setHighScores] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // function to call API to get the user's game records from DB\n  async function getUserScores() {\n    try {\n      const response = await axios.get(\n        `https://mastermind-backend-tiansi.wl.r.appspot.com/game/findByUserId?userId=${userId}&page=${page}&size=${size}`\n      );\n      setUserScores(response.data);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setLoading(false);\n    }\n  }\n\n  async function getUserScores1(p) {\n    try {\n      const response = await axios.get(\n        `https://mastermind-backend-tiansi.wl.r.appspot.com/game/findByUserId?userId=${userId}&page=${p}&size=${size}`\n      );\n      setUserScores(response.data);\n      setLoading(false);\n    } catch (error) {\n      setError(error.message);\n      setLoading(false);\n    }\n  }\n\n  // function to call API to get all the game records\n  async function getHighScores() {\n    try {\n      const response = await axios.get(\n        `https://mastermind-backend-tiansi.wl.r.appspot.com/game/findAllRecords?page=${page}&size=${size}`\n      );\n\n      // Fetch userName for each userId in highScores\n      const highScorePromises = response.data.map(async (highScore) => {\n        const user = await axios.get(\n          `https://mastermind-backend-tiansi.wl.r.appspot.com/user/findByUserId?userId=${highScore.userId}&page=${page}&size=${size}`\n        );\n        return {\n          id: highScore.id,\n          userId: highScore.userId,\n          userName: user.data.handle,\n          score: highScore.score,\n          date: highScore.date,\n        };\n      });\n\n      // Wait for all promises to resolve\n      const highScoresWithNames = await Promise.all(highScorePromises);\n      setHighScores(highScoresWithNames);\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  const [numOfRecordByUserId, setNumOfRecordByUserId] = useState(1);\n  const [numOfAllRecord, setNumOfAllRecord] = useState(1);\n\n  const getNumOfRecordByUserId = async () => {\n    try {\n      // console.log(\"start axios request\");\n      const response = await axios.get(\n        `https://mastermind-backend-tiansi.wl.r.appspot.com/game/findUserIdCount?userId=${userId}`\n      );\n      // console.log(response.data);\n      setNumOfRecordByUserId(response.data);\n      return response.data;\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const getNumOfAllRecord = () => {\n    axios\n      .get(\n        `https://mastermind-backend-tiansi.wl.r.appspot.com/game/findRecordCount`\n      )\n      .then((response) => {\n        setNumOfAllRecord(response.data);\n      })\n      .catch((error) => {\n        setError(error.message);\n      });\n  };\n\n  // pagination control\n  const [page, setPage] = useState(0);\n  const [size, setSize] = useState(20);\n\n  const handlePageChange = (page) => {\n    setPage(page);\n  };\n\n  const handleSizeChange = (size) => {\n    setSize(size);\n    setPage(0); // Reset to the first page when changing items per page\n  };\n\n  useEffect(() => {\n    // call the function that fetch data from DB\n    getNumOfRecordByUserId();\n    getNumOfAllRecord();\n    getUserScores();\n    getHighScores();\n  }, [selectedComponent, page, size]);\n\n  useEffect(() => {\n    setPage(0);\n  }, [selectedComponent]);\n\n  const handleDelete = async (id) => {\n    console.log(\"Delete the game record with id \" + id);\n    //delete function to be implemented\n    try {\n      const preNum = numOfRecordByUserId;\n      console.log(\"The total before delete is \" + preNum);\n      const response = await axios.delete(\n        `https://mastermind-backend-tiansi.wl.r.appspot.com/game/deleteById?id=${id}`\n      );\n      console.log(\"Game record deleted successfully:\", response.data);\n\n      //try to deal with edge case 11 - 1 = 10\n      const num = await getNumOfRecordByUserId();\n      // console.log(\"The total after delete is \" + num);\n      // console.log(page > Math.ceil(num / size) - 1);\n      if (page > Math.ceil(num / size) - 1) {\n        getUserScores1(page - 1);\n        setPage(page - 1);\n        console.log(\"We are in page \" + page);\n      } else {\n        getUserScores();\n      }\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <Container>\n      <div className=\"game-record-container\">\n        <div className=\"back-container\" onClick={onGamePageChange}>\n          <FontAwesomeIcon icon={faArrowLeft} size=\"2x\" />\n        </div>\n        <div className=\"select-container\">\n          {/* Dropdown to select the component */}\n          <select\n            className=\"form-select\"\n            value={selectedComponent ? \"userScores\" : \"highScores\"}\n            onChange={() => setSelectedComponent(!selectedComponent)}\n          >\n            <option value=\"userScores\">Your Own Scores</option>\n            <option value=\"highScores\">All High Scores</option>\n          </select>\n        </div>\n        {/* UserScores component */}\n        {selectedComponent && (\n          <div className=\"score-container\">\n            {userScores.map((userScore) => (\n              <Row key={userScore.id}>\n                <Col>{userScore.score}</Col>\n                <Col>{userScore.date}</Col>\n                <Col>\n                  {/* Add a delete icon with an onClick handler */}\n                  <FontAwesomeIcon\n                    icon={faTrash}\n                    onClick={() => handleDelete(userScore.id)}\n                    style={{ cursor: \"pointer\" }}\n                  />\n                </Col>\n              </Row>\n            ))}\n          </div>\n        )}\n        {/* HighScores component */}\n        {!selectedComponent && (\n          <div className=\"score-container\">\n            {/* <h2>High Scores</h2> */}\n            <Row>\n              <Col>\n                <strong>UserID</strong>\n              </Col>{\" \"}\n              <Col>\n                <strong>Username</strong>\n              </Col>\n              <Col>\n                <strong>Score</strong>\n              </Col>{\" \"}\n              <Col>\n                <strong>Date</strong>\n              </Col>\n            </Row>\n            {highScores.map((highScore) => (\n              <Row key={highScore.id}>\n                <Col>{highScore.userId}</Col> <Col>{highScore.userName}</Col>{\" \"}\n                <Col>{highScore.score}</Col>\n                <Col>{highScore.date}</Col>\n              </Row>\n            ))}\n          </div>\n        )}\n      </div>\n      <Pagination\n        activePage={page}\n        itemsPerPage={size}\n        totalItems={selectedComponent ? numOfRecordByUserId : numOfAllRecord}\n        onPageChange={handlePageChange}\n        onItemsPerPageChange={handleSizeChange}\n        select={selectedComponent}\n      />\n    </Container>\n  );\n}\n\nexport default GameRecord;\n","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/LoginForm.js",["76","77"],[],"import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithRedirect,\n  GoogleAuthProvider,\n  signInWithPopup,\n} from \"firebase/auth\";\nimport React, { useState, useEffect } from \"react\";\n\n// LoginSuccessful is a function sent in by parent component\nfunction LoginForm({ LoginEvent }) {\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDwDAW1JEl8hNManD4jYSlJXHxa5RCjOQ0\",\n    authDomain: \"bookstore-user-login.firebaseapp.com\",\n    projectId: \"bookstore-user-login\",\n    storageBucket: \"bookstore-user-login.appspot.com\",\n    messagingSenderId: \"570693469610\",\n    appId: \"1:570693469610:web:9b5b6dd3aa2c37862d97d3\",\n  };\n\n  initializeApp(firebaseConfig);\n\n  const [loggedUser, setLoggedUser] = useState(\"\");\n\n  // function to sign in with Google's page\n  const signInWithGoogle = () => {\n    const provider = new GoogleAuthProvider();\n    const auth = getAuth();\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        // User signed in\n        console.log(result.user);\n        setLoggedUser(result.user);\n      })\n      .catch((error) => {\n        // Handle Errors here.\n        console.error(error);\n      });\n  };\n\n  // function to sign out\n  function logoutGoogle() {\n    const auth = getAuth();\n    auth.signOut();\n    setLoggedUser(null);\n  }\n\n  // we put the onAuthStateChanged in useEffect so this is only called when\n  // this component mounts\n  useEffect(() => {\n    const auth = getAuth();\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in.\n        console.log(\"User is signed in:\", user);\n\n        setLoggedUser(user);\n      } else {\n        // No user is signed in.\n        console.log(\"No user is signed in.\");\n      }\n      let userId = user ? user.uid : \"\";\n      LoginEvent(user, userId);\n    });\n  }, []);\n  // note the ? to show either login or logout button\n  return (\n    <div className=\"log\">\n      {loggedUser ? (\n        <>\n          {/* <p>user: {loggedUser.uid}</p>{\" \"} */}\n          <button onClick={logoutGoogle}>Log out</button>{\" \"}\n        </>\n      ) : (\n        <button onClick={signInWithGoogle}>Sign in with Google</button>\n      )}\n    </div>\n  );\n}\nexport default LoginForm;\n","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/OneGuessBoard.js",["78","79"],[],"import CheckMatches from \"../CheckMatches\";\nimport { useEffect, useState } from \"react\";\nimport Circle from \"./Circle\";\n\nfunction OneGuessBoard({\n    selectColor,\n    isActive,\n    phrase,\n    onRowSubmit,\n    isReset,\n    onWin,\n  }) {\n    const [colors, setColors] = useState(Array(4).fill(\"#a3a3a3\"));\n  \n    function handleClick(i) {\n      const newColors = colors.slice();\n      newColors[i] = selectColor;\n      {\n        isActive() && setColors(newColors);\n      }\n    }\n  \n    const [match, setMatch] = useState([null, null]);\n  \n    function handleSubmitClick() {\n      if (colors.every((color) => color !== \"#a3a3a3\")) {\n        const [exact, partial] = CheckMatches(phrase, colors);\n        setMatch([exact, partial]);\n        if (exact == 4) {\n          onWin();\n        } else {\n          onRowSubmit();\n        }\n      } else {\n        alert(\"You should finish the guess first\");\n      }\n    }\n  \n    //clear all the circles' colors and promp buttons whenever the \"Play Again\" button gets called\n    //When clicking \"Play Again\", isReset's value filps, which triggers seColors and setMatch get called\n    useEffect(() => {\n      setColors(Array(4).fill(\"#a3a3a3\"));\n      setMatch([null, null]);\n    }, [isReset]);\n  \n    return (\n      <>\n        <div className=\"board-row\">\n          <div className=\"circle-container\">\n            <Circle color={colors[0]} onCircleClick={() => handleClick(0)} />\n            <Circle color={colors[1]} onCircleClick={() => handleClick(1)} />\n            <Circle color={colors[2]} onCircleClick={() => handleClick(2)} />\n            <Circle color={colors[3]} onCircleClick={() => handleClick(3)} />\n          </div>\n          <div className=\"submit-container\">\n            {isActive() && (\n              <button className=\"submit\" onClick={handleSubmitClick}>\n                Submit\n              </button>\n            )}\n            {match[0] !== null && match[1] !== null && (\n              <button className=\"submit\">\n                {match[0]} exact, {match[1]} partial\n              </button>\n            )}\n          </div>\n        </div>\n      </>\n    );\n}\n\nexport default OneGuessBoard;","/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/MastermindHeader.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/Instruction.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/Pagination.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/CheckMatches.js",[],[],"/Users/tiansigu/Documents/CS514/Project4-Part1/mastermind-frontend/src/Components/Circle.js",[],[],{"ruleId":"80","severity":1,"message":"81","line":7,"column":8,"nodeType":"82","messageId":"83","endLine":7,"endColumn":17},{"ruleId":"84","severity":1,"message":"85","line":20,"column":16,"nodeType":"86","messageId":"87","endLine":20,"endColumn":18},{"ruleId":"88","severity":1,"message":"89","line":48,"column":6,"nodeType":"90","endLine":48,"endColumn":8,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":129,"column":6,"nodeType":"90","endLine":129,"endColumn":37,"suggestions":"93"},{"ruleId":"80","severity":1,"message":"94","line":4,"column":3,"nodeType":"82","messageId":"83","endLine":4,"endColumn":21},{"ruleId":"88","severity":1,"message":"95","line":65,"column":6,"nodeType":"90","endLine":65,"endColumn":8,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":18,"column":7,"nodeType":"99","messageId":"100","endLine":20,"endColumn":8},{"ruleId":"84","severity":1,"message":"85","line":29,"column":19,"nodeType":"86","messageId":"87","endLine":29,"endColumn":21},"no-unused-vars","'LoginForm' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateSequence'. Either include it or remove the dependency array.","ArrayExpression",["101"],"React Hook useEffect has missing dependencies: 'getHighScores', 'getNumOfRecordByUserId', and 'getUserScores'. Either include them or remove the dependency array.",["102"],"'signInWithRedirect' is defined but never used.","React Hook useEffect has a missing dependency: 'LoginEvent'. Either include it or remove the dependency array. If 'LoginEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["103"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [generateSequence]",{"range":"110","text":"111"},"Update the dependencies array to be: [selectedComponent, page, size, getNumOfRecordByUserId, getUserScores, getHighScores]",{"range":"112","text":"113"},"Update the dependencies array to be: [LoginEvent]",{"range":"114","text":"115"},[1673,1675],"[generateSequence]",[4289,4320],"[selectedComponent, page, size, getNumOfRecordByUserId, getUserScores, getHighScores]",[1786,1788],"[LoginEvent]"]